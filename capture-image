#!/usr/bin/env bash

usage() { printf "\
Usage: $0 [-b <BRIGHTNESS>] [-g <GAIN>] [-e <EXPOSURE>] [-A] [-S] [-l]\n\
[-h] <SERIAL>\n\n\
Set specified camera properties and make a snapshot.\n\
Run tcam-ctrl to get serial of your camera, info about properties ranges and\n\
more.\n\n\
When properties are set, their values are saved in the camera and stay the same\n\
until they are changed again. Properties values have to be set before first\n\
image capturing, otherwise it might fail.\n\n\
Options:\n\
   -b  set brightness\n\
   -g  set gain\n\
   -e  set exposure\n\
   -A  allow automatic gain and exposure correction\n\
   -S  start live stream, instead of making a snapshot. Video is not saved. This\n\
is convenient for calibrating camera properties\n\
   -l  also list current properties values. This cause additional delay before\n\
snapshot is captured.\n\
   -h  show this message\n\n\
Examples:\n\
   $0 -b 10 -g 50 -e 4000 <SERIAL>\n\
   $0 -e 10000 <SERIAL>\n\
   $0 -l <SERIAL>\n" 1>&2; exit 1; } 

# Set variables to empty string
serial=''
bright=''
gain=''
exp=''
show_props=''
live_stream=''
auto_props=''

if [ -z "$1" ]; then
    usage
    exit 1
fi

# Parse arguments
# No colon after 'l' and 'h' options here, because they don't expect an argument
while getopts ":b:g:e:ASlh" o; do
    case "${o}" in
	b)
	    bright=${OPTARG}
	    ;;
	g)
	    gain=${OPTARG}
	    ;;
	e)
	    exp=${OPTARG}
	    ;;
	A)
	    auto_props='yes'
	    ;;
	S)
	    live_stream='yes'
	    ;;
	l)
	    show_props='yes'
	    ;;
	h)
	    usage
	    ;;
	*)
	    usage
	    ;;
    esac
done

# Interpret the rest of the cmdline as SERIAL
shift "$((OPTIND-1))"
serial=$@

# If argument specified, set corresponding camera property
if [ -z "$serial" ]; then
    printf "No serial given!\n" 1>&2; exit 1;
fi    

if [ ! -z "$bright" ]; then
    tcam-ctrl -p -s "Brightness=$bright" $serial
fi

if [ ! -z "$gain" ]; then
    tcam-ctrl -p -s "Gain=$gain" $serial
fi

if [ ! -z "$exp" ]; then
    tcam-ctrl -p -s "Exposure=$exp" $serial
fi    

if [ -z "$bright" -a -z "$gain" -a -z "$exp" ]; then
    printf "No properties were changed.\n"
fi


# Show properties
if [ ! -z "$show_props" ]; then
    printf "\nCurrent properties: "
    tcam-ctrl -p $serial
    printf "\n"
fi
   

if [ ! -z "$live_stream" ]; then
    # Start live stream
    if [ ! -z "$auto_props" ]; then
	gst-launch-1.0 tcamsrc serial=$serial \
		       ! video/x-bayer \
		       ! tcamautoexposure \
		       ! tcamwhitebalance \
		       ! bayer2rgb \
		       ! videoconvert \
		       ! autovideosink
    else	
	gst-launch-1.0 tcamsrc serial=$serial \
		       ! video/x-bayer \
		       ! tcamwhitebalance \
		       ! bayer2rgb \
		       ! videoconvert \
		       ! autovideosink
    fi
else
    # Capture the image
    snapshot_name=$(date +camera-snapshot_%F_%R:%S:%N_%:::z)
    if [ ! -z "auto_props" ]; then
	gst-launch-1.0 tcamsrc serial=$serial \
		       ! video/x-bayer \
		       ! tcamautoexposure \
		       ! tcamwhitebalance \
		       ! bayer2rgb \
		       ! videoconvert \
		       ! pngenc snapshot=true \
		       ! filesink location="${snapshot_name}.png"
    else
	gst-launch-1.0 tcamsrc serial=$serial \
		       ! video/x-bayer \
		       ! tcamwhitebalance \
		       ! bayer2rgb \
		       ! videoconvert \
		       ! pngenc snapshot=true \
		       ! filesink location="${snapshot_name}.png"
    fi
fi    
